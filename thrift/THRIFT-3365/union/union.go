// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package union

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attributes:
//  - Foo
//  - Bar
type Select struct {
  Foo *Foo `thrift:"foo,1" db:"foo" json:"foo,omitempty"`
  Bar *Bar `thrift:"bar,2" db:"bar" json:"bar,omitempty"`
}

func NewSelect() *Select {
  return &Select{}
}

var Select_Foo_DEFAULT *Foo
func (p *Select) GetFoo() *Foo {
  if !p.IsSetFoo() {
    return Select_Foo_DEFAULT
  }
return p.Foo
}
var Select_Bar_DEFAULT *Bar
func (p *Select) GetBar() *Bar {
  if !p.IsSetBar() {
    return Select_Bar_DEFAULT
  }
return p.Bar
}
func (p *Select) CountSetFieldsSelect() int {
  count := 0
  if (p.IsSetFoo()) {
    count++
  }
  if (p.IsSetBar()) {
    count++
  }
  return count

}

func (p *Select) IsSetFoo() bool {
  return p.Foo != nil
}

func (p *Select) IsSetBar() bool {
  return p.Bar != nil
}

func (p *Select) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Select)  ReadField1(iprot thrift.TProtocol) error {
  p.Foo = &Foo{}
  if err := p.Foo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Foo), err)
  }
  return nil
}

func (p *Select)  ReadField2(iprot thrift.TProtocol) error {
  p.Bar = &Bar{}
  if err := p.Bar.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Bar), err)
  }
  return nil
}

func (p *Select) Write(oprot thrift.TProtocol) error {
  if c := p.CountSetFieldsSelect(); c != 1 {
    return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
  }
  if err := oprot.WriteStructBegin("Select"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Select) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetFoo() {
    if err := oprot.WriteFieldBegin("foo", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:foo: ", p), err) }
    if err := p.Foo.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Foo), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:foo: ", p), err) }
  }
  return err
}

func (p *Select) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetBar() {
    if err := oprot.WriteFieldBegin("bar", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:bar: ", p), err) }
    if err := p.Bar.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Bar), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:bar: ", p), err) }
  }
  return err
}

func (p *Select) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Select(%+v)", *p)
}

// Attributes:
//  - Foo
type Foo struct {
  Foo string `thrift:"foo,1" db:"foo" json:"foo"`
}

func NewFoo() *Foo {
  return &Foo{}
}


func (p *Foo) GetFoo() string {
  return p.Foo
}
func (p *Foo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Foo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Foo = v
}
  return nil
}

func (p *Foo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Foo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Foo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("foo", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:foo: ", p), err) }
  if err := oprot.WriteString(string(p.Foo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.foo (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:foo: ", p), err) }
  return err
}

func (p *Foo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Foo(%+v)", *p)
}

// Attributes:
//  - Bar
type Bar struct {
  // unused field # 1
  Bar string `thrift:"bar,2" db:"bar" json:"bar"`
}

func NewBar() *Bar {
  return &Bar{}
}


func (p *Bar) GetBar() string {
  return p.Bar
}
func (p *Bar) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Bar)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Bar = v
}
  return nil
}

func (p *Bar) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Bar"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Bar) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bar", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:bar: ", p), err) }
  if err := oprot.WriteString(string(p.Bar)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bar (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:bar: ", p), err) }
  return err
}

func (p *Bar) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Bar(%+v)", *p)
}

